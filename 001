if not getgenv().AutoTradingConfig then
    error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö AutoTradingConfig! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î Config ‡∏Å‡πà‡∏≠‡∏ô")
    return
end

local config = getgenv().AutoTradingConfig

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer

-- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
local AutoTradingSystem = {
    sellingActive = false,
    buyingActive = false,
    autoClaimActive = false,
    antiAfkActive = false,
    lastRichestCoins = 0,
    statusLabel = nil,
    moneyLabel = nil,
    gui = nil,
    retryCount = 0,
    lastAfkTime = 0
}

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Debug Log
local function debugPrint(message)
    if config.debugMode and config.printLogs then
        print("üîß [AutoTrading] " .. message)
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Error Handler
local function handleError(funcName, error)
    warn("‚ùå [AutoTrading Error in " .. funcName .. "] " .. tostring(error))
    
    if config.safeMode then
        AutoTradingSystem.retryCount = AutoTradingSystem.retryCount + 1
        if AutoTradingSystem.retryCount >= config.maxRetries then
            warn("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
            AutoTradingSystem:stopAll()
        end
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡πÇ‡∏•‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
function AutoTradingSystem:teleportIfNeeded()
    if game.PlaceId ~= config.targetWorldId then
        debugPrint("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡πÇ‡∏•‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢...")
        local success, error = pcall(function()
            local teleportArgs = {config.targetWorldId, {}}
            local remote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("WorldTeleportRemote")
            remote:InvokeServer(unpack(teleportArgs))
        end)
        
        if not success then
            handleError("teleportIfNeeded", error)
        end
        return success
    end
    return false
end
-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏ï‡∏•‡∏≤‡∏î (‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏ô workspace)
function AutoTradingSystem:teleportToMarket()
    if not config.autoTeleportToMarket then return false end
    
    local success, error = pcall(function()
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart", 10)

        if hrp then
            if character.PrimaryPart == nil then
                character.PrimaryPart = hrp
            end
            
            -- ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏£‡∏Å (BillboardPart)
            local primaryPart = workspace.Interactions.PlayerMarket:WaitForChild("BillboardPart")
            character:SetPrimaryPartCFrame(primaryPart.CFrame + Vector3.new(0, 5, 0))
            debugPrint("‚úÖ ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ BillboardPart ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

            task.wait(2)
            
            -- ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ BillboardPart ‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‚Üí ‡πÉ‡∏ä‡πâ backup
            if not primaryPart then
                debugPrint("‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÅ‡∏ó‡∏ô")
                local backupCoords = config.marketCoordinates.backup
                character:SetPrimaryPartCFrame(CFrame.new(backupCoords[1], backupCoords[2], backupCoords[3]))
            end

            task.wait(2)
            return true
        else
            warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤ HumanoidRootPart ‡πÑ‡∏î‡πâ")
            return false
        end
    end)
    
    if not success then
        handleError("teleportToMarket", error)
    end
    return success
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
function AutoTradingSystem:getRichestPlayer()
    local richestPlayer = nil
    local maxCoins = 0
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local success, coins = pcall(function()
                return player:WaitForChild("Data", 2):WaitForChild("Currency", 2):WaitForChild("Coins", 2).Value
            end)
            
            if success and coins > maxCoins then
                maxCoins = coins
                richestPlayer = player
            end
        end
    end
    
    return richestPlayer, maxCoins
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
function AutoTradingSystem:getMyMoney()
    local success, coins = pcall(function()
        return LocalPlayer:WaitForChild("Data", 2):WaitForChild("Currency", 2):WaitForChild("Coins", 2).Value
    end)
    
    return success and coins or 0
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≤‡∏¢‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
function AutoTradingSystem:sellItem(price)
    local success, error = pcall(function()
        local args = {{
            Price = price,
            ItemType = config.sellItemType,
            Name = config.sellItemName,
            Amount = config.sellAmount
        }}
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("SellPlayerMarketRemote"):InvokeServer(unpack(args))
    end)
    
    if not success then
        handleError("sellItem", error)
    end
    return success
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î
function AutoTradingSystem:buyFromMarket(index, playerName)
    local success, error = pcall(function()
        local args = {{
            Index = tostring(index),
            Player = Players:WaitForChild(playerName)
        }}
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("PurchasePlayerMarketRemote"):FireServer(unpack(args))
    end)
    
    if not success then
        handleError("buyFromMarket", error)
    end
    return success
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î
function AutoTradingSystem:claimMoney()
    local claimRange = config.claimIndexRange
    for i = claimRange[1], claimRange[2] do
        pcall(function()
            local args = {tostring(i)}
            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ClaimPlayerMarketRemote"):FireServer(unpack(args))
        end)
        task.wait(0.1)
    end
end

-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
function AutoTradingSystem:startAutoClaim()
    if not config.autoClaimEnabled then return end
    
    self.autoClaimActive = true
    debugPrint("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    
    task.spawn(function()
        while self.autoClaimActive do
            self:claimMoney()
            task.wait(config.claimInterval)
        end
    end)
end

-- ‡∏£‡∏∞‡∏ö‡∏ö Anti-AFK
function AutoTradingSystem:startAntiAfk()
    if not config.antiAfkEnabled then return end
    
    self.antiAfkActive = true
    self.lastAfkTime = tick()
    debugPrint("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Anti-AFK")
    
    task.spawn(function()
        while self.antiAfkActive do
            local currentTime = tick()
            if currentTime - self.lastAfkTime >= config.antiAfkInterval then
                self:performAntiAfkActions()
                self.lastAfkTime = currentTime
            end
            task.wait(1) -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        end
    end)
end

-- ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô AFK
function AutoTradingSystem:performAntiAfkActions()
    local character = LocalPlayer.Character
    if not character then return end
    
    local humanoid = character:FindFirstChild("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    
    debugPrint("‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô AFK...")
    
    -- ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î
    if config.antiAfkMethods.jumpEnabled and humanoid then
        pcall(function()
            humanoid.Jump = true
        end)
    end
    
    -- ‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏±‡πâ‡∏ô‡πÜ
    if config.antiAfkMethods.moveEnabled and humanoid then
        pcall(function()
            local moveVector = Vector3.new(
                math.random(-1, 1) * 0.1,
                0,
                math.random(-1, 1) * 0.1
            )
            humanoid:Move(moveVector)
            task.wait(0.1)
            humanoid:Move(Vector3.new(0, 0, 0)) -- ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏ô
        end)
    end
    
    -- ‡∏´‡∏°‡∏∏‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á
    if config.antiAfkMethods.cameraEnabled then
        pcall(function()
            local camera = workspace.CurrentCamera
            if camera and rootPart then
                local originalCFrame = camera.CFrame
                local randomAngle = math.rad(math.random(-10, 10))
                camera.CFrame = camera.CFrame * CFrame.Angles(0, randomAngle, 0)
                task.wait(0.2)
                camera.CFrame = originalCFrame
            end
        end)
    end
    
    -- ‡∏™‡πà‡∏á‡πÅ‡∏ä‡∏ó (‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ß‡∏±‡∏á)
    if config.antiAfkMethods.chatEnabled and #config.antiAfkMessages > 0 then
        pcall(function()
            local randomMessage = config.antiAfkMessages[math.random(1, #config.antiAfkMessages)]
            local chatRemote = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
            if chatRemote then
                chatRemote = chatRemote:FindFirstChild("SayMessageRequest")
                if chatRemote then
                    chatRemote:FireServer(randomMessage, "All")
                end
            end
        end)
    end
    
    debugPrint("‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô AFK ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
end

-- ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö Anti-AFK
function AutoTradingSystem:stopAntiAfk()
    self.antiAfkActive = false
    debugPrint("‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö Anti-AFK")
end

-- ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
function AutoTradingSystem:updateMoneyDisplay()
    if self.moneyLabel and config.showMoneyDisplay then
        local myMoney = self:getMyMoney()
        self.moneyLabel.Text = "üí∞ ‡πÄ‡∏á‡∏¥‡∏ô: " .. tostring(myMoney) .. " Coins"
    end
end

-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
function AutoTradingSystem:startAutoSelling()
    if not config.autoSellEnabled then return end
    
    self.sellingActive = true
    debugPrint("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    
    -- ‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏•‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏Å‡πà‡∏≠‡∏ô
    if self:teleportIfNeeded() then
        task.wait(5)
    end
    self:teleportToMarket()
    
    task.spawn(function()
        while self.sellingActive do
            if config.advancedSettings.sellOnlyToRichest then
                local richestPlayer, coins = self:getRichestPlayer()
                
                if richestPlayer and coins > 0 then
                    if not config.advancedSettings.waitForMoneyChange or coins ~= self.lastRichestCoins then
                        debugPrint("‡∏Ç‡∏≤‡∏¢‡πÉ‡∏´‡πâ " .. richestPlayer.Name .. " ‡∏£‡∏≤‡∏Ñ‡∏≤ " .. coins)
                        self:sellItem(coins)
                        self.lastRichestCoins = coins
                        
                        if self.statusLabel then
                            self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Ç‡∏≤‡∏¢‡πÉ‡∏´‡πâ " .. richestPlayer.Name .. " ‡∏£‡∏≤‡∏Ñ‡∏≤ " .. coins
                        end
                        
                        task.wait(2)
                    else
                        debugPrint("‡∏£‡∏≠‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á...")
                        if self.statusLabel then
                            self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏≠‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á..."
                        end
                        task.wait(config.sellCheckInterval)
                    end
                else
                    debugPrint("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô")
                    if self.statusLabel then
                        self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô"
                    end
                    task.wait(5)
                end
            end
        end
    end)
end

-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
function AutoTradingSystem:startAutoBuying()
    if not config.autoBuyEnabled then return end
    
    self.buyingActive = true
    debugPrint("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å " .. config.targetBuyerName)
    
    task.spawn(function()
        while self.buyingActive do
            local buyRange = config.buyIndexRange
            for i = buyRange[1], buyRange[2] do
                if not self.buyingActive then break end
                
                local success = self:buyFromMarket(i, config.targetBuyerName)
                if success then
                    debugPrint("‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à Index " .. i)
                    if self.statusLabel then
                        self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à Index " .. i
                    end
                else
                    if not config.advancedSettings.skipEmptySlots then
                        debugPrint("‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à Index " .. i)
                    end
                end
                task.wait(config.buyCheckInterval)
            end
            
            -- ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô
            if config.advancedSettings.autoRefreshMarket then
                debugPrint("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô...")
                self:teleportToMarket()
                task.wait(config.buyRefreshInterval)
            end
        end
    end)
end

-- ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function AutoTradingSystem:stopAll()
    self.sellingActive = false
    self.buyingActive = false
    self.autoClaimActive = false
    self.antiAfkActive = false
    debugPrint("‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ GUI ‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ
function AutoTradingSystem:makeDraggable(frame)
    if not config.guiSettings.draggable then return end
    
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI
function AutoTradingSystem:createGUI()
    if not config.guiSettings.enabled then return end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AutoTradingGUI"
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    self.gui = screenGui
    
    local guiSize = config.guiSettings.size
    local guiPos = config.guiSettings.position
    local colors = config.guiSettings.colors
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, guiSize[1], 0, guiSize[2])
    frame.Position = UDim2.new(guiPos[1], -guiSize[1]/2, guiPos[2], -guiSize[2]/2)
    frame.BackgroundColor3 = Color3.fromRGB(colors.background[1], colors.background[2], colors.background[3])
    frame.BorderSizePixel = 0
    frame.Active = true
    frame.Parent = screenGui
    
    self:makeDraggable(frame)
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = frame
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 40)
    title.Text = "üçé Auto Trading System v2.0"
    title.BackgroundTransparency = 1
    title.TextColor3 = Color3.new(1, 1, 1)
    title.Font = Enum.Font.GothamBold
    title.TextSize = 18
    title.Parent = frame
    
    local yOffset = 45
    
    -- Player Name Display
    if config.showPlayerInfo then
        local playerLabel = Instance.new("TextLabel")
        playerLabel.Size = UDim2.new(1, -20, 0, 25)
        playerLabel.Position = UDim2.new(0, 10, 0, yOffset)
        playerLabel.Text = "üë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: " .. LocalPlayer.Name
        playerLabel.BackgroundTransparency = 1
        playerLabel.TextColor3 = Color3.fromRGB(100, 200, 255)
        playerLabel.Font = Enum.Font.GothamBold
        playerLabel.TextSize = 16
        playerLabel.TextXAlignment = Enum.TextXAlignment.Left
        playerLabel.Parent = frame
        yOffset = yOffset + 30
    end
    
    -- Money Display
    if config.showMoneyDisplay then
        self.moneyLabel = Instance.new("TextLabel")
        self.moneyLabel.Size = UDim2.new(1, -20, 0, 25)
        self.moneyLabel.Position = UDim2.new(0, 10, 0, yOffset)
        self.moneyLabel.Text = "üí∞ ‡πÄ‡∏á‡∏¥‡∏ô: 0 Coins"
        self.moneyLabel.BackgroundTransparency = 1
        self.moneyLabel.TextColor3 = Color3.fromRGB(255, 215, 0)
        self.moneyLabel.Font = Enum.Font.GothamBold
        self.moneyLabel.TextSize = 16
        self.moneyLabel.TextXAlignment = Enum.TextXAlignment.Left
        self.moneyLabel.Parent = frame
        
        -- ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        task.spawn(function()
            while screenGui.Parent do
                self:updateMoneyDisplay()
                task.wait(config.moneyUpdateInterval)
            end
        end)
        yOffset = yOffset + 30
    end
    
    -- Target Buyer Input
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, -20, 0, 25)
    nameLabel.Position = UDim2.new(0, 10, 0, yOffset)
    nameLabel.Text = "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å:"
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.Font = Enum.Font.Gotham
    nameLabel.TextSize = 14
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.Parent = frame
    yOffset = yOffset + 25
    
    local nameInput = Instance.new("TextBox")
    nameInput.Size = UDim2.new(1, -20, 0, 30)
    nameInput.Position = UDim2.new(0, 10, 0, yOffset)
    nameInput.Text = config.targetBuyerName
    nameInput.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    nameInput.BorderSizePixel = 0
    nameInput.TextColor3 = Color3.new(1, 1, 1)
    nameInput.Font = Enum.Font.Gotham
    nameInput.TextSize = 14
    nameInput.Parent = frame
    
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 5)
    inputCorner.Parent = nameInput
    yOffset = yOffset + 40
    
    -- Status Label
    self.statusLabel = Instance.new("TextLabel")
    self.statusLabel.Size = UDim2.new(1, -20, 0, 25)
    self.statusLabel.Position = UDim2.new(0, 10, 0, yOffset)
    self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
    self.statusLabel.BackgroundTransparency = 1
    self.statusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
    self.statusLabel.Font = Enum.Font.Gotham
    self.statusLabel.TextSize = 14
    self.statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.statusLabel.Parent = frame
    yOffset = yOffset + 35
    
    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
    local buttons = {}
    
    -- Selling Buttons
    if config.autoSellEnabled then
        buttons.sellStart = self:createButton(frame, "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≤‡∏¢", {0.05, 0, 0, yOffset}, {0.45, 0, 0, 35}, colors.sellButton)
        buttons.sellStop = self:createButton(frame, "üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Ç‡∏≤‡∏¢", {0.52, 0, 0, yOffset}, {0.45, 0, 0, 35}, colors.stopButton)
        yOffset = yOffset + 45
    end
    
    -- Buying Buttons
    if config.autoBuyEnabled then
        buttons.buyStart = self:createButton(frame, "üõí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ã‡∏∑‡πâ‡∏≠", {0.05, 0, 0, yOffset}, {0.45, 0, 0, 35}, colors.buyButton)
        buttons.buyStop = self:createButton(frame, "‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ã‡∏∑‡πâ‡∏≠", {0.52, 0, 0, yOffset}, {0.45, 0, 0, 35}, colors.stopButton)
        yOffset = yOffset + 45
    end
    
    -- Claim Buttons
    if config.autoClaimEnabled then
        buttons.claimStart = self:createButton(frame, "üí∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", {0.05, 0, 0, yOffset}, {0.45, 0, 0, 35}, colors.claimButton)
        buttons.claimStop = self:createButton(frame, "üí∏ ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", {0.52, 0, 0, yOffset}, {0.45, 0, 0, 35}, colors.stopButton)
        yOffset = yOffset + 45
    end
    
    -- Anti-AFK Buttons
    if config.antiAfkEnabled then
        buttons.afkStart = self:createButton(frame, "üõ°Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏° Anti-AFK", {0.05, 0, 0, yOffset}, {0.45, 0, 0, 35}, {76, 175, 80})
        buttons.afkStop = self:createButton(frame, "üî¥ ‡∏´‡∏¢‡∏∏‡∏î Anti-AFK", {0.52, 0, 0, yOffset}, {0.45, 0, 0, 35}, colors.stopButton)
        yOffset = yOffset + 45
    end
    
    -- Teleport Button
    if config.autoTeleportToMarket then
        buttons.teleport = self:createButton(frame, "üìç ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏ï‡∏•‡∏≤‡∏î", {0, 10, 0, yOffset}, {1, -20, 0, 35}, colors.teleportButton)
        yOffset = yOffset + 45
    end
    
    -- Close Button
    buttons.close = self:createButton(frame, "‚úï ‡∏õ‡∏¥‡∏î", {0, 10, 0, yOffset}, {1, -20, 0, 35}, colors.stopButton)
    
    -- Event Handlers
    nameInput.FocusLost:Connect(function()
        config.targetBuyerName = nameInput.Text
        debugPrint("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô: " .. config.targetBuyerName)
    end)
    
    if buttons.sellStart then
        buttons.sellStart.MouseButton1Click:Connect(function()
            if not self.sellingActive then
                self:startAutoSelling()
                self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏¢..."
                self.statusLabel.TextColor3 = Color3.fromRGB(255, 165, 0)
            end
        end)
    end
    
    if buttons.sellStop then
        buttons.sellStop.MouseButton1Click:Connect(function()
            self.sellingActive = false
            self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏´‡∏¢‡∏∏‡∏î‡∏Ç‡∏≤‡∏¢"
            self.statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        end)
    end
    
    if buttons.buyStart then
        buttons.buyStart.MouseButton1Click:Connect(function()
            if not self.buyingActive then
                self:startAutoBuying()
                self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠..."
                self.statusLabel.TextColor3 = Color3.fromRGB(100, 150, 255)
            end
        end)
    end
    
    if buttons.buyStop then
        buttons.buyStop.MouseButton1Click:Connect(function()
            self.buyingActive = false
            self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏´‡∏¢‡∏∏‡∏î‡∏ã‡∏∑‡πâ‡∏≠"
            self.statusLabel.TextColor3 = Color3.fromRGB(200, 100, 255)
        end)
    end
    
    if buttons.claimStart then
        buttons.claimStart.MouseButton1Click:Connect(function()
            if not self.autoClaimActive then
                self:startAutoClaim()
                self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô..."
                self.statusLabel.TextColor3 = Color3.fromRGB(255, 193, 7)
            end
        end)
    end
    
    if buttons.claimStop then
        buttons.claimStop.MouseButton1Click:Connect(function()
            self.autoClaimActive = false
            self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô"
            self.statusLabel.TextColor3 = Color3.fromRGB(255, 87, 34)
        end)
    end
    
    if buttons.afkStart then
        buttons.afkStart.MouseButton1Click:Connect(function()
            if not self.antiAfkActive then
                self:startAntiAfk()
                self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: Anti-AFK ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"
                self.statusLabel.TextColor3 = Color3.fromRGB(76, 175, 80)
            end
        end)
    end
    
    if buttons.afkStop then
        buttons.afkStop.MouseButton1Click:Connect(function()
            self:stopAntiAfk()
            self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: Anti-AFK ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"
            self.statusLabel.TextColor3 = Color3.fromRGB(244, 67, 54)
        end)
    end
    
    if buttons.teleport then
        buttons.teleport.MouseButton1Click:Connect(function()
            self:teleportToMarket()
            self.statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß"
            self.statusLabel.TextColor3 = Color3.fromRGB(100, 100, 100)
        end)
    end
    
    buttons.close.MouseButton1Click:Connect(function()
        self:stopAll()
        screenGui:Destroy()
        debugPrint("‡∏õ‡∏¥‡∏î GUI")
    end)
    
    debugPrint("GUI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°
function AutoTradingSystem:createButton(parent, text, position, size, color)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(size[1], size[2], size[3], size[4])
    button.Position = UDim2.new(position[1], position[2], position[3], position[4])
    button.Text = text
    button.BackgroundColor3 = Color3.fromRGB(color[1], color[2], color[3])
    button.BorderSizePixel = 0
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 14
    button.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = button
    
    return button
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
function AutoTradingSystem:initialize()
    debugPrint("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Auto Trading System v2.0")
    
    -- ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÇ‡∏•‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    task.spawn(function()
        if self:teleportIfNeeded() then
            task.wait(5)
        end
        if config.autoTeleportToMarket then
            self:teleportToMarket()
        end
    end)
    
    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI
    self:createGUI()
    
    -- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° config
    if config.autoSellEnabled then
        task.wait(2)
        self:startAutoSelling()
    end
    
    if config.autoBuyEnabled then
        task.wait(2)
        self:startAutoBuying()
    end
    
    if config.autoClaimEnabled then
        task.wait(2)
        self:startAutoClaim()
    end
    
    if config.antiAfkEnabled then
        task.wait(1)
        self:startAntiAfk()
    end
    
    debugPrint("‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
end

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
AutoTradingSystem:initialize()

-- ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô global environment
getgenv().AutoTradingSystem = AutoTradingSystem
return AutoTradingSystem
